@model PLANMHE.Models.Plan
@{
	ViewData["Title"] = "Thêm mới kế hoạch";
	var users = ViewBag.Users as SelectList;
	var selectedUserIds = ViewData["SelectedUserIds"] as List<int> ?? new List<int>();
}
<div class="main-box">
	<div class="header-section">
		<div class="left-icon"><i class="fa fa-arrow-left"></i></div>
		<div class="page-title">Thêm mới kế hoạch</div>
		<div class="right-settings"><i class="fa fa-gear"></i></div>
	</div>
</div>
<div class="form-wrapper">
	<div class="input-group">
		<label for="Name">Tên Kế Hoạch (*)</label>
		<input type="text" id="Name" placeholder="Nhập tên kế hoạch">
		<span id="NameError" class="text-danger"></span>
	</div>
	<div class="input-group">
		<label for="Description">Mô Tả</label>
		<input type="text" id="Description" placeholder="Mô tả">
		<span id="DescriptionError" class="text-danger"></span>
	</div>
	<div class="input-group">
		<label for="danhsach">Người thực hiện (*)</label>
		<div class="select-container">
			<div class="select-box" onclick="toggleDropdown()">
				@if (selectedUserIds.Any())
				{
					var firstUserId = selectedUserIds.First();
					var firstUser = users.FirstOrDefault(u => u.Value == firstUserId.ToString());
					if (firstUser != null)
					{
						<div class="tag" data-value="@firstUserId">
							@firstUser.Text <span class="remove-tag" onclick="removeTag('@firstUserId')">×</span>
						</div>
						<input type="hidden" name="SelectedUserIds" value="@firstUserId" />
					}
					@foreach (var id in selectedUserIds.Skip(1))
					{
						var user = users.FirstOrDefault(u => u.Value == id.ToString());
						if (user != null)
						{
							<div class="tag" data-value="@id">
								@user.Text <span class="remove-tag" onclick="removeTag('@id')">×</span>
							</div>
							<input type="hidden" name="SelectedUserIds" value="@id" />
						}
					}
				}
				<input type="text" id="searchUser" placeholder="Tìm kiếm người thực hiện" onkeyup="filterUsers()" style="flex-grow: 1; min-width: 100px; order: 1; box-sizing: border-box;">
			</div>
			<div class="dropdown" id="dropdown">
				<div class="option-container">
					@foreach (var user in users)
					{
						<option value="@user.Value">@user.Text</option>
					}
				</div>
			</div>
		</div>
		<span id="SelectedUserIdsError" class="text-danger"></span>
	</div>
	<div class="input-group">
		<label for="date-range">Thời gian (*)</label>
		<div class="date-container">
			<input type="date" class="date-field" id="StartDate" step="1">
			<span class="date-divider">⟷</span>
			<input type="date" class="date-field" id="EndDate" step="1">
		</div>
		<span id="DateError" class="text-danger"></span>
	</div>
	<div class="footer-addcategory" style="position: fixed; bottom: 0; left: 0; width: 100%; background-color: #f8f9fa; padding: 16px; box-shadow: 0 -2px 5px rgba(0,0,0,0.1); text-align: right; z-index: 1000;">
		<button onclick="savePlan()" class="btn-addcategory" style="background:#428BCA; color: white; border-radius: 3px; border: 1px solid #2E6589; border-bottom-width: 4px; padding: 2px 6px; font-size: 13px; font-family: segoeui;">Thêm Mới</button>
	</div>
</div>
<script>
	function toggleDropdown() {
		const dropdown = document.getElementById('dropdown');
		dropdown.classList.toggle('show');
	}

	function removeTag(value) {
		const tag = document.querySelector(`.tag[data-value="${value}"]`);
		if (tag) tag.remove();
		const hiddenInput = document.querySelector(`input[type="hidden"][name="SelectedUserIds"][value="${value}"]`);
		if (hiddenInput) hiddenInput.remove();
		event.stopPropagation();
		const searchInput = document.getElementById('searchUser');
		searchInput.style.order = document.querySelectorAll('.tag').length + 1;
	}

	function filterUsers() {
		const searchInput = document.getElementById('searchUser').value.toLowerCase();
		const options = document.querySelectorAll('.dropdown option');
		options.forEach(option => {
			const text = option.textContent.toLowerCase();
			option.style.display = text.includes(searchInput) ? '' : 'none';
		});
		document.getElementById('dropdown').classList.add('show');
	}

	document.querySelectorAll('.dropdown option').forEach(option => {
		option.addEventListener('click', () => {
			const value = option.getAttribute('value');
			const text = option.textContent;
			const selectBox = document.querySelector('.select-box');
			if (!selectBox.querySelector(`.tag[data-value="${value}"]`)) {
				const tag = document.createElement('div');
				tag.className = 'tag';
				tag.setAttribute('data-value', value);
				tag.innerHTML = `${text} <span class="remove-tag" onclick="removeTag('${value}')">×</span>`;
				selectBox.appendChild(tag);
				const hiddenInput = document.createElement('input');
				hiddenInput.type = 'hidden';
				hiddenInput.name = 'SelectedUserIds';
				hiddenInput.value = value;
				selectBox.appendChild(hiddenInput);
				const searchInput = document.getElementById('searchUser');
				searchInput.style.order = selectBox.querySelectorAll('.tag').length + 1;
			}
			toggleDropdown();
			document.getElementById('searchUser').value = '';
			filterUsers();
		});
	});

	document.addEventListener('click', (e) => {
		if (!e.target.closest('.select-container')) {
			document.getElementById('dropdown').classList.remove('show');
		}
	});

	function savePlan() {
		const name = document.getElementById('Name').value;
		const description = document.getElementById('Description').value;
		const startDate = document.getElementById('StartDate').value;
		const endDate = document.getElementById('EndDate').value;
		const selectedUserIds = Array.from(document.querySelectorAll('input[name="SelectedUserIds"]')).map(input => parseInt(input.value));

		document.getElementById('NameError').textContent = '';
		document.getElementById('SelectedUserIdsError').textContent = '';
		document.getElementById('DateError').textContent = '';

		if (!name) {
			document.getElementById('NameError').textContent = 'Vui lòng nhập tên kế hoạch.';
			return;
		}
		if (!selectedUserIds || selectedUserIds.length === 0) {
			document.getElementById('SelectedUserIdsError').textContent = 'Vui lòng chọn ít nhất một người thực hiện.';
			return;
		}
		if (!startDate || !endDate) {
			document.getElementById('DateError').textContent = 'Vui lòng chọn thời gian bắt đầu và kết thúc.';
			return;
		}

		const request = {
			Name: name,
			Description: description,
			StartDate: startDate,
			EndDate: endDate,
			SelectedUserIds: selectedUserIds
		};

		fetch('/SettingPlan/CreatePlan', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json'
			},
			body: JSON.stringify(request)
		})
		.then(response => {
			if (!response.ok) {
				return response.json().then(err => { throw new Error(err.message); });
			}
			return response.json();
		})
		.then(data => {
			if (data.success) {
				window.location.href = data.redirectUrl; // Chuyển hướng đến /SettingPlan/Detail/{planId}
			} else {
				alert(data.message);
			}
		})
		.catch(error => {
			alert('Lỗi khi lưu kế hoạch: ' + error.message);
		});
	}
</script>
